package com.example.dt.List_Test.View.Activities;

import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.ProgressBar;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModelProviders;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.dt.List_Test.Model.ApiClient;
import com.example.dt.List_Test.Model.ApiInterface;
import com.example.dt.List_Test.Model.Course;
import com.example.dt.List_Test.R;
import com.example.dt.List_Test.View.Adapter.NoteAdapter;
import com.example.dt.List_Test.ViewModel.MasterViewModel;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class MainActivity extends AppCompatActivity {

    @BindView(R.id.recycler)
    RecyclerView recycler;


    NoteAdapter adapter = new NoteAdapter();
    MasterViewModel viewModel;

    List<Course> Allcourses = new ArrayList<>();
    List<Course> coursesOnList = new ArrayList<>();

    String TAG = MainActivity.class.getSimpleName();
    @BindView(R.id.progress_bar)
    ProgressBar progressBar;

    ApiInterface apiService;
    Call<ArrayList<Course>> call;
    private boolean FirstLoaded = false;
    int Lastindex = 0;
    private boolean Loading=false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);


        viewModel = ViewModelProviders.of(this).get(MasterViewModel.class);
        viewModel.GetAllNotes(Lastindex).observe(this, new Observer<List<Course>>() {
            @Override
            public void onChanged(List<Course> courses) {
                if (courses.size() > 0) {
                    coursesOnList.addAll(courses);
                    Lastindex = coursesOnList.get(coursesOnList.size() - 1).get_Autogenerated();
                    adapter=new NoteAdapter();
                    adapter.submitList(coursesOnList);
                    recycler.setAdapter(adapter);
                    progressBar.setVisibility(View.INVISIBLE);
                }
            }

        });
        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);

        recycler.setLayoutManager(linearLayoutManager);
        recycler.setAdapter(adapter);

        new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0,
                ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {
            @Override
            public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {
                return false;
            }

            @Override
            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
                viewModel.DeleteNote(adapter.GetNoteAt(viewHolder.getAdapterPosition()));
            }
        }).attachToRecyclerView(recycler);

        adapter.SetOnItemClickListner(new NoteAdapter.OnRecyclerItemClick() {
            @Override
            public void OnItemClicked(Course course) {
//                Toast.makeText(MainActivity.this, course.getName(), Toast.LENGTH_SHORT).show();
            }
        });

        recycler.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
            }

            @Override
            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);
                int visibleItemCount = linearLayoutManager.getChildCount();
                int totalItemCount = linearLayoutManager.getItemCount();
                int firstVisibleItemPosition = linearLayoutManager.findFirstVisibleItemPosition();
                if ((visibleItemCount + firstVisibleItemPosition) >= totalItemCount
                        && firstVisibleItemPosition >= 5) {
                    if (Allcourses.size() > coursesOnList.size()) {
                        Loading=true;
                        List<Integer> integers = new ArrayList<>();
                        for (int i = 0; i < coursesOnList.size(); i++) {
                            integers.add(coursesOnList.get(i).getId());
                        }
                        viewModel.GetAllExceptthis(integers);
                    }
                }
            }
        });
        viewModel.RefreshList(Lastindex);
        if (!FirstLoaded) {

            Handler handler = new Handler();
            handler.postDelayed(new Runnable() {
                public void run() {
                    FirstLoaded=true;
                    LoadData();
                }
            }, 5000);   //5 seconds
        }
    }
    private void LoadData() {
        progressBar.setVisibility(View.VISIBLE);
        apiService = ApiClient.createService(ApiInterface.class);
        call = apiService.getCourses();
        call.enqueue(new Callback<ArrayList<Course>>() {
            @Override
            public void onResponse(Call<ArrayList<Course>> call, Response<ArrayList<Course>> response) {
                Allcourses.addAll(response.body());
                viewModel.DeleteAlltNote(response.body());
            }

            @Override
            public void onFailure(Call<ArrayList<Course>> call, Throwable t) {
                Log.e(TAG, t.toString());
            }
        });
    }

    @Override
    protected void onPause() {
        super.onPause();

    }
}
